// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: movie.proto

package movie

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_UNKNOWN  Status = 0
	Status_ONGOING  Status = 1
	Status_FINISHED Status = 2
	Status_RUMOR    Status = 3
)

var Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "ONGOING",
	2: "FINISHED",
	3: "RUMOR",
}

var Status_value = map[string]int32{
	"UNKNOWN":  0,
	"ONGOING":  1,
	"FINISHED": 2,
	"RUMOR":    3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{0}
}

type Movie struct {
	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Director  string `protobuf:"bytes,3,opt,name=director,proto3" json:"director,omitempty"`
	Thumbnail string `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Status    Status `protobuf:"varint,6,opt,name=status,proto3,enum=movie.Status" json:"status,omitempty"`
	Country   string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *Movie) Reset()         { *m = Movie{} }
func (m *Movie) String() string { return proto.CompactTextString(m) }
func (*Movie) ProtoMessage()    {}
func (*Movie) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{0}
}
func (m *Movie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Movie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Movie.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Movie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Movie.Merge(m, src)
}
func (m *Movie) XXX_Size() int {
	return m.Size()
}
func (m *Movie) XXX_DiscardUnknown() {
	xxx_messageInfo_Movie.DiscardUnknown(m)
}

var xxx_messageInfo_Movie proto.InternalMessageInfo

func (m *Movie) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Movie) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Movie) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *Movie) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *Movie) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *Movie) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type SearchMovieReq struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Country  string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Status   Status `protobuf:"varint,5,opt,name=status,proto3,enum=movie.Status" json:"status,omitempty"`
	Director string `protobuf:"bytes,6,opt,name=director,proto3" json:"director,omitempty"`
}

func (m *SearchMovieReq) Reset()         { *m = SearchMovieReq{} }
func (m *SearchMovieReq) String() string { return proto.CompactTextString(m) }
func (*SearchMovieReq) ProtoMessage()    {}
func (*SearchMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{1}
}
func (m *SearchMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMovieReq.Merge(m, src)
}
func (m *SearchMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMovieReq proto.InternalMessageInfo

func (m *SearchMovieReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchMovieReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchMovieReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *SearchMovieReq) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *SearchMovieReq) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

type SearchMovieRes struct {
	Res []*Movie `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
}

func (m *SearchMovieRes) Reset()         { *m = SearchMovieRes{} }
func (m *SearchMovieRes) String() string { return proto.CompactTextString(m) }
func (*SearchMovieRes) ProtoMessage()    {}
func (*SearchMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{2}
}
func (m *SearchMovieRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchMovieRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMovieRes.Merge(m, src)
}
func (m *SearchMovieRes) XXX_Size() int {
	return m.Size()
}
func (m *SearchMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMovieRes proto.InternalMessageInfo

func (m *SearchMovieRes) GetRes() []*Movie {
	if m != nil {
		return m.Res
	}
	return nil
}

//TODO: add userId too decide who can do these ops
type AddMovieReq struct {
	Movie *Movie `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
}

func (m *AddMovieReq) Reset()         { *m = AddMovieReq{} }
func (m *AddMovieReq) String() string { return proto.CompactTextString(m) }
func (*AddMovieReq) ProtoMessage()    {}
func (*AddMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{3}
}
func (m *AddMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMovieReq.Merge(m, src)
}
func (m *AddMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *AddMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMovieReq proto.InternalMessageInfo

func (m *AddMovieReq) GetMovie() *Movie {
	if m != nil {
		return m.Movie
	}
	return nil
}

type AddMovieRes struct {
}

func (m *AddMovieRes) Reset()         { *m = AddMovieRes{} }
func (m *AddMovieRes) String() string { return proto.CompactTextString(m) }
func (*AddMovieRes) ProtoMessage()    {}
func (*AddMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{4}
}
func (m *AddMovieRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddMovieRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMovieRes.Merge(m, src)
}
func (m *AddMovieRes) XXX_Size() int {
	return m.Size()
}
func (m *AddMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddMovieRes proto.InternalMessageInfo

type UpdateMovieReq struct {
	Movie *Movie `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
}

func (m *UpdateMovieReq) Reset()         { *m = UpdateMovieReq{} }
func (m *UpdateMovieReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMovieReq) ProtoMessage()    {}
func (*UpdateMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{5}
}
func (m *UpdateMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMovieReq.Merge(m, src)
}
func (m *UpdateMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMovieReq proto.InternalMessageInfo

func (m *UpdateMovieReq) GetMovie() *Movie {
	if m != nil {
		return m.Movie
	}
	return nil
}

type UpdateMovieRes struct {
}

func (m *UpdateMovieRes) Reset()         { *m = UpdateMovieRes{} }
func (m *UpdateMovieRes) String() string { return proto.CompactTextString(m) }
func (*UpdateMovieRes) ProtoMessage()    {}
func (*UpdateMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{6}
}
func (m *UpdateMovieRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMovieRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMovieRes.Merge(m, src)
}
func (m *UpdateMovieRes) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMovieRes proto.InternalMessageInfo

type DeleteMovieReq struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteMovieReq) Reset()         { *m = DeleteMovieReq{} }
func (m *DeleteMovieReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMovieReq) ProtoMessage()    {}
func (*DeleteMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{7}
}
func (m *DeleteMovieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieReq.Merge(m, src)
}
func (m *DeleteMovieReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieReq proto.InternalMessageInfo

func (m *DeleteMovieReq) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteMovieRes struct {
}

func (m *DeleteMovieRes) Reset()         { *m = DeleteMovieRes{} }
func (m *DeleteMovieRes) String() string { return proto.CompactTextString(m) }
func (*DeleteMovieRes) ProtoMessage()    {}
func (*DeleteMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{8}
}
func (m *DeleteMovieRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMovieRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieRes.Merge(m, src)
}
func (m *DeleteMovieRes) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieRes proto.InternalMessageInfo

type GetAllMoviesReq struct {
}

func (m *GetAllMoviesReq) Reset()         { *m = GetAllMoviesReq{} }
func (m *GetAllMoviesReq) String() string { return proto.CompactTextString(m) }
func (*GetAllMoviesReq) ProtoMessage()    {}
func (*GetAllMoviesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{9}
}
func (m *GetAllMoviesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllMoviesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllMoviesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllMoviesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMoviesReq.Merge(m, src)
}
func (m *GetAllMoviesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllMoviesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMoviesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMoviesReq proto.InternalMessageInfo

type GetAllMoviesRes struct {
	Res []*Movie `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
}

func (m *GetAllMoviesRes) Reset()         { *m = GetAllMoviesRes{} }
func (m *GetAllMoviesRes) String() string { return proto.CompactTextString(m) }
func (*GetAllMoviesRes) ProtoMessage()    {}
func (*GetAllMoviesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{10}
}
func (m *GetAllMoviesRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllMoviesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllMoviesRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllMoviesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMoviesRes.Merge(m, src)
}
func (m *GetAllMoviesRes) XXX_Size() int {
	return m.Size()
}
func (m *GetAllMoviesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMoviesRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMoviesRes proto.InternalMessageInfo

func (m *GetAllMoviesRes) GetRes() []*Movie {
	if m != nil {
		return m.Res
	}
	return nil
}

func init() {
	proto.RegisterEnum("movie.Status", Status_name, Status_value)
	proto.RegisterType((*Movie)(nil), "movie.Movie")
	proto.RegisterType((*SearchMovieReq)(nil), "movie.SearchMovieReq")
	proto.RegisterType((*SearchMovieRes)(nil), "movie.SearchMovieRes")
	proto.RegisterType((*AddMovieReq)(nil), "movie.AddMovieReq")
	proto.RegisterType((*AddMovieRes)(nil), "movie.AddMovieRes")
	proto.RegisterType((*UpdateMovieReq)(nil), "movie.UpdateMovieReq")
	proto.RegisterType((*UpdateMovieRes)(nil), "movie.UpdateMovieRes")
	proto.RegisterType((*DeleteMovieReq)(nil), "movie.DeleteMovieReq")
	proto.RegisterType((*DeleteMovieRes)(nil), "movie.DeleteMovieRes")
	proto.RegisterType((*GetAllMoviesReq)(nil), "movie.GetAllMoviesReq")
	proto.RegisterType((*GetAllMoviesRes)(nil), "movie.GetAllMoviesRes")
}

func init() { proto.RegisterFile("movie.proto", fileDescriptor_fde087a4194eda75) }

var fileDescriptor_fde087a4194eda75 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xc1, 0x8a, 0xd3, 0x50,
	0x14, 0xcd, 0x4b, 0x4c, 0xda, 0xde, 0x74, 0x62, 0xbc, 0xa8, 0x84, 0x20, 0x21, 0x3c, 0x10, 0x8a,
	0x8b, 0xc1, 0xa9, 0xb3, 0x13, 0xc1, 0x91, 0xd1, 0x5a, 0x64, 0x52, 0x48, 0x29, 0xae, 0x3b, 0xcd,
	0x83, 0x09, 0x64, 0x26, 0x33, 0x79, 0xaf, 0x03, 0xfe, 0x85, 0xe0, 0x4f, 0xf8, 0x1f, 0x6e, 0x5c,
	0x76, 0xe9, 0x52, 0xda, 0x1f, 0x91, 0xbc, 0xa4, 0xf5, 0x25, 0x16, 0x75, 0x76, 0xbd, 0xe7, 0xbe,
	0x73, 0x7a, 0xee, 0x39, 0xa5, 0x60, 0x5f, 0xe6, 0xb7, 0x29, 0x3b, 0xbc, 0x2e, 0x72, 0x91, 0xa3,
	0x29, 0x07, 0xfa, 0x95, 0x80, 0x79, 0x56, 0x7e, 0x42, 0x07, 0xf4, 0x34, 0xf1, 0x48, 0x48, 0x06,
	0x66, 0xac, 0xa7, 0x09, 0x3e, 0x04, 0x53, 0xa4, 0x22, 0x63, 0x9e, 0x1e, 0x92, 0x41, 0x2f, 0xae,
	0x06, 0xf4, 0xa1, 0x9b, 0xa4, 0x05, 0x5b, 0x88, 0xbc, 0xf0, 0x0c, 0xb9, 0xd8, 0xcd, 0xf8, 0x04,
	0x7a, 0xe2, 0x62, 0x79, 0x79, 0x7e, 0x35, 0x4f, 0x33, 0xcf, 0x94, 0xcb, 0xdf, 0x00, 0x3e, 0x05,
	0x8b, 0x8b, 0xb9, 0x58, 0x72, 0xcf, 0x0a, 0xc9, 0xc0, 0x19, 0x1e, 0x1c, 0x56, 0x76, 0xa6, 0x12,
	0x8c, 0xeb, 0x25, 0x7a, 0xd0, 0x59, 0xe4, 0xcb, 0x2b, 0x51, 0x7c, 0xf2, 0x3a, 0x52, 0x62, 0x3b,
	0xd2, 0x2f, 0x04, 0x9c, 0x29, 0x9b, 0x17, 0x8b, 0x0b, 0x69, 0x38, 0x66, 0x37, 0xff, 0xe9, 0x59,
	0x91, 0xbc, 0xd7, 0x90, 0x54, 0x3c, 0x99, 0x7f, 0xf3, 0xa4, 0x1e, 0x6d, 0x35, 0x8f, 0xa6, 0xcf,
	0x5b, 0xa6, 0x38, 0x06, 0x60, 0x14, 0x8c, 0x7b, 0x24, 0x34, 0x06, 0xf6, 0xb0, 0x5f, 0x2b, 0x56,
	0xdb, 0x72, 0x41, 0x8f, 0xc0, 0x3e, 0x49, 0x92, 0xdd, 0x0d, 0x14, 0xaa, 0x2a, 0xe4, 0x19, 0x6d,
	0x42, 0xdd, 0xd2, 0x81, 0x4a, 0xe1, 0xf4, 0x18, 0x9c, 0xd9, 0x75, 0x32, 0x17, 0xec, 0x4e, 0x22,
	0x6e, 0x8b, 0xc5, 0x69, 0x08, 0xce, 0x29, 0xcb, 0x98, 0xa2, 0xb3, 0x0d, 0xd4, 0xa8, 0x02, 0x2d,
	0x39, 0x8d, 0x17, 0x9c, 0x3e, 0x80, 0xfb, 0x23, 0x26, 0x4e, 0xb2, 0x4c, 0x22, 0x3c, 0x66, 0x37,
	0xf4, 0xa8, 0x0d, 0xfd, 0x33, 0x83, 0x67, 0x2f, 0xc1, 0xaa, 0x32, 0x46, 0x1b, 0x3a, 0xb3, 0xe8,
	0x43, 0x34, 0xf9, 0x18, 0xb9, 0x5a, 0x39, 0x4c, 0xa2, 0xd1, 0x64, 0x1c, 0x8d, 0x5c, 0x82, 0x7d,
	0xe8, 0xbe, 0x1b, 0x47, 0xe3, 0xe9, 0xfb, 0xb7, 0xa7, 0xae, 0x8e, 0x3d, 0x30, 0xe3, 0xd9, 0xd9,
	0x24, 0x76, 0x8d, 0xe1, 0x37, 0x1d, 0xfa, 0x52, 0x6b, 0xca, 0x8a, 0xdb, 0x74, 0xc1, 0xf0, 0x18,
	0xba, 0xdb, 0x78, 0x10, 0xeb, 0x2f, 0x53, 0x22, 0xf6, 0xff, 0xc4, 0x38, 0xd5, 0xf0, 0x15, 0xd8,
	0x4a, 0x73, 0xf8, 0x68, 0xdb, 0x7d, 0xe3, 0x27, 0xe6, 0xef, 0x85, 0x6b, 0xba, 0x12, 0xe7, 0x8e,
	0xde, 0x2c, 0xc6, 0xdf, 0x0b, 0xd7, 0x74, 0x25, 0xd9, 0x1d, 0xbd, 0xd9, 0x87, 0xbf, 0x17, 0x2e,
	0xe9, 0xaf, 0xa1, 0xaf, 0x66, 0x8e, 0x8f, 0xeb, 0x87, 0xad, 0x6e, 0xfc, 0xfd, 0x38, 0xa7, 0xda,
	0x1b, 0xef, 0xfb, 0x3a, 0x20, 0xab, 0x75, 0x40, 0x7e, 0xae, 0x03, 0xf2, 0x79, 0x13, 0x68, 0xab,
	0x4d, 0xa0, 0xfd, 0xd8, 0x04, 0xda, 0xb9, 0x25, 0xff, 0x21, 0x5e, 0xfc, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0xaf, 0xc1, 0x0a, 0x30, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MovieServiceClient interface {
	AddMovie(ctx context.Context, in *AddMovieReq, opts ...grpc.CallOption) (*AddMovieRes, error)
	SearchMovie(ctx context.Context, in *SearchMovieReq, opts ...grpc.CallOption) (*SearchMovieRes, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieReq, opts ...grpc.CallOption) (*UpdateMovieRes, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieReq, opts ...grpc.CallOption) (*DeleteMovieRes, error)
	GetAllMovies(ctx context.Context, in *GetAllMoviesReq, opts ...grpc.CallOption) (*GetAllMoviesRes, error)
}

type movieServiceClient struct {
	cc *grpc.ClientConn
}

func NewMovieServiceClient(cc *grpc.ClientConn) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) AddMovie(ctx context.Context, in *AddMovieReq, opts ...grpc.CallOption) (*AddMovieRes, error) {
	out := new(AddMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/AddMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SearchMovie(ctx context.Context, in *SearchMovieReq, opts ...grpc.CallOption) (*SearchMovieRes, error) {
	out := new(SearchMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/SearchMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieReq, opts ...grpc.CallOption) (*UpdateMovieRes, error) {
	out := new(UpdateMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieReq, opts ...grpc.CallOption) (*DeleteMovieRes, error) {
	out := new(DeleteMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetAllMovies(ctx context.Context, in *GetAllMoviesReq, opts ...grpc.CallOption) (*GetAllMoviesRes, error) {
	out := new(GetAllMoviesRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/GetAllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
type MovieServiceServer interface {
	AddMovie(context.Context, *AddMovieReq) (*AddMovieRes, error)
	SearchMovie(context.Context, *SearchMovieReq) (*SearchMovieRes, error)
	UpdateMovie(context.Context, *UpdateMovieReq) (*UpdateMovieRes, error)
	DeleteMovie(context.Context, *DeleteMovieReq) (*DeleteMovieRes, error)
	GetAllMovies(context.Context, *GetAllMoviesReq) (*GetAllMoviesRes, error)
}

// UnimplementedMovieServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (*UnimplementedMovieServiceServer) AddMovie(ctx context.Context, req *AddMovieReq) (*AddMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (*UnimplementedMovieServiceServer) SearchMovie(ctx context.Context, req *SearchMovieReq) (*SearchMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMovie not implemented")
}
func (*UnimplementedMovieServiceServer) UpdateMovie(ctx context.Context, req *UpdateMovieReq) (*UpdateMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (*UnimplementedMovieServiceServer) DeleteMovie(ctx context.Context, req *DeleteMovieReq) (*DeleteMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (*UnimplementedMovieServiceServer) GetAllMovies(ctx context.Context, req *GetAllMoviesReq) (*GetAllMoviesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}

func RegisterMovieServiceServer(s *grpc.Server, srv MovieServiceServer) {
	s.RegisterService(&_MovieService_serviceDesc, srv)
}

func _MovieService_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/AddMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).AddMovie(ctx, req.(*AddMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SearchMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SearchMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/SearchMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SearchMovie(ctx, req.(*SearchMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMoviesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/GetAllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetAllMovies(ctx, req.(*GetAllMoviesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MovieService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMovie",
			Handler:    _MovieService_AddMovie_Handler,
		},
		{
			MethodName: "SearchMovie",
			Handler:    _MovieService_SearchMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
		{
			MethodName: "GetAllMovies",
			Handler:    _MovieService_GetAllMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}

func (m *Movie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Movie) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Movie) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintMovie(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Thumbnail) > 0 {
		i -= len(m.Thumbnail)
		copy(dAtA[i:], m.Thumbnail)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Thumbnail)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Director) > 0 {
		i -= len(m.Director)
		copy(dAtA[i:], m.Director)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Director)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMovie(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Director) > 0 {
		i -= len(m.Director)
		copy(dAtA[i:], m.Director)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Director)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintMovie(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMovie(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMovie(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SearchMovieRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchMovieRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchMovieRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Res) > 0 {
		for iNdEx := len(m.Res) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Res[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMovie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Movie != nil {
		{
			size, err := m.Movie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMovie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddMovieRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddMovieRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddMovieRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Movie != nil {
		{
			size, err := m.Movie.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMovie(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateMovieRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMovieRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateMovieRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteMovieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA4 := make([]byte, len(m.Id)*10)
		var j3 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMovie(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMovieRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMovieRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMovieRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllMoviesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMoviesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllMoviesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAllMoviesRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllMoviesRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllMoviesRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Res) > 0 {
		for iNdEx := len(m.Res) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Res[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMovie(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMovie(dAtA []byte, offset int, v uint64) int {
	offset -= sovMovie(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Movie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovie(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	l = len(m.Director)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	l = len(m.Thumbnail)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMovie(uint64(m.Status))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	return n
}

func (m *SearchMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMovie(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMovie(uint64(m.Status))
	}
	l = len(m.Director)
	if l > 0 {
		n += 1 + l + sovMovie(uint64(l))
	}
	return n
}

func (m *SearchMovieRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Res) > 0 {
		for _, e := range m.Res {
			l = e.Size()
			n += 1 + l + sovMovie(uint64(l))
		}
	}
	return n
}

func (m *AddMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Movie != nil {
		l = m.Movie.Size()
		n += 1 + l + sovMovie(uint64(l))
	}
	return n
}

func (m *AddMovieRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Movie != nil {
		l = m.Movie.Size()
		n += 1 + l + sovMovie(uint64(l))
	}
	return n
}

func (m *UpdateMovieRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteMovieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovMovie(uint64(e))
		}
		n += 1 + sovMovie(uint64(l)) + l
	}
	return n
}

func (m *DeleteMovieRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllMoviesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllMoviesRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Res) > 0 {
		for _, e := range m.Res {
			l = e.Size()
			n += 1 + l + sovMovie(uint64(l))
		}
	}
	return n
}

func sovMovie(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMovie(x uint64) (n int) {
	return sovMovie(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Movie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Movie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Movie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Director", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Director = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumbnail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Thumbnail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Director", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Director = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchMovieRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchMovieRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchMovieRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Res = append(m.Res, &Movie{})
			if err := m.Res[len(m.Res)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Movie == nil {
				m.Movie = &Movie{}
			}
			if err := m.Movie.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddMovieRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddMovieRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddMovieRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Movie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Movie == nil {
				m.Movie = &Movie{}
			}
			if err := m.Movie.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMovieRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMovieRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMovieRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMovie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMovie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMovie
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMovie
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMovie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMovieRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMovieRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMovieRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMoviesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllMoviesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllMoviesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllMoviesRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllMoviesRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllMoviesRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMovie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMovie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Res = append(m.Res, &Movie{})
			if err := m.Res[len(m.Res)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMovie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMovie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMovie(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMovie
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMovie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMovie
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMovie
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMovie
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMovie        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMovie          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMovie = fmt.Errorf("proto: unexpected end of group")
)
