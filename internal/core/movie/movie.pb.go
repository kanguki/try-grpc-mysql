// Code generated by protoc-gen-go. DO NOT EDIT.
// source: movie.proto

package movie

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MovieRes struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Director             string   `protobuf:"bytes,3,opt,name=director,proto3" json:"director,omitempty"`
	Thumbnail            string   `protobuf:"bytes,5,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Status               int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Country              string   `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MovieRes) Reset()         { *m = MovieRes{} }
func (m *MovieRes) String() string { return proto.CompactTextString(m) }
func (*MovieRes) ProtoMessage()    {}
func (*MovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{0}
}

func (m *MovieRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovieRes.Unmarshal(m, b)
}
func (m *MovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovieRes.Marshal(b, m, deterministic)
}
func (m *MovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovieRes.Merge(m, src)
}
func (m *MovieRes) XXX_Size() int {
	return xxx_messageInfo_MovieRes.Size(m)
}
func (m *MovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_MovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_MovieRes proto.InternalMessageInfo

func (m *MovieRes) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MovieRes) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MovieRes) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *MovieRes) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *MovieRes) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MovieRes) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type SearchMovieReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Country              string   `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Status               int32    `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	Director             string   `protobuf:"bytes,6,opt,name=director,proto3" json:"director,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchMovieReq) Reset()         { *m = SearchMovieReq{} }
func (m *SearchMovieReq) String() string { return proto.CompactTextString(m) }
func (*SearchMovieReq) ProtoMessage()    {}
func (*SearchMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{1}
}

func (m *SearchMovieReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMovieReq.Unmarshal(m, b)
}
func (m *SearchMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMovieReq.Marshal(b, m, deterministic)
}
func (m *SearchMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMovieReq.Merge(m, src)
}
func (m *SearchMovieReq) XXX_Size() int {
	return xxx_messageInfo_SearchMovieReq.Size(m)
}
func (m *SearchMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMovieReq proto.InternalMessageInfo

func (m *SearchMovieReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchMovieReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SearchMovieReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *SearchMovieReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SearchMovieReq) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

type SearchMovieRes struct {
	Res                  []*MovieRes `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SearchMovieRes) Reset()         { *m = SearchMovieRes{} }
func (m *SearchMovieRes) String() string { return proto.CompactTextString(m) }
func (*SearchMovieRes) ProtoMessage()    {}
func (*SearchMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{2}
}

func (m *SearchMovieRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMovieRes.Unmarshal(m, b)
}
func (m *SearchMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMovieRes.Marshal(b, m, deterministic)
}
func (m *SearchMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMovieRes.Merge(m, src)
}
func (m *SearchMovieRes) XXX_Size() int {
	return xxx_messageInfo_SearchMovieRes.Size(m)
}
func (m *SearchMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMovieRes proto.InternalMessageInfo

func (m *SearchMovieRes) GetRes() []*MovieRes {
	if m != nil {
		return m.Res
	}
	return nil
}

//TODO: add userId too decide who can do these ops
type AddMovieReq struct {
	Movie                *MovieRes `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AddMovieReq) Reset()         { *m = AddMovieReq{} }
func (m *AddMovieReq) String() string { return proto.CompactTextString(m) }
func (*AddMovieReq) ProtoMessage()    {}
func (*AddMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{3}
}

func (m *AddMovieReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMovieReq.Unmarshal(m, b)
}
func (m *AddMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMovieReq.Marshal(b, m, deterministic)
}
func (m *AddMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMovieReq.Merge(m, src)
}
func (m *AddMovieReq) XXX_Size() int {
	return xxx_messageInfo_AddMovieReq.Size(m)
}
func (m *AddMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddMovieReq proto.InternalMessageInfo

func (m *AddMovieReq) GetMovie() *MovieRes {
	if m != nil {
		return m.Movie
	}
	return nil
}

type AddMovieRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddMovieRes) Reset()         { *m = AddMovieRes{} }
func (m *AddMovieRes) String() string { return proto.CompactTextString(m) }
func (*AddMovieRes) ProtoMessage()    {}
func (*AddMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{4}
}

func (m *AddMovieRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddMovieRes.Unmarshal(m, b)
}
func (m *AddMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddMovieRes.Marshal(b, m, deterministic)
}
func (m *AddMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddMovieRes.Merge(m, src)
}
func (m *AddMovieRes) XXX_Size() int {
	return xxx_messageInfo_AddMovieRes.Size(m)
}
func (m *AddMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AddMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_AddMovieRes proto.InternalMessageInfo

type UpdateMovieReq struct {
	Movie                *MovieRes `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateMovieReq) Reset()         { *m = UpdateMovieReq{} }
func (m *UpdateMovieReq) String() string { return proto.CompactTextString(m) }
func (*UpdateMovieReq) ProtoMessage()    {}
func (*UpdateMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{5}
}

func (m *UpdateMovieReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMovieReq.Unmarshal(m, b)
}
func (m *UpdateMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMovieReq.Marshal(b, m, deterministic)
}
func (m *UpdateMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMovieReq.Merge(m, src)
}
func (m *UpdateMovieReq) XXX_Size() int {
	return xxx_messageInfo_UpdateMovieReq.Size(m)
}
func (m *UpdateMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMovieReq proto.InternalMessageInfo

func (m *UpdateMovieReq) GetMovie() *MovieRes {
	if m != nil {
		return m.Movie
	}
	return nil
}

type UpdateMovieRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMovieRes) Reset()         { *m = UpdateMovieRes{} }
func (m *UpdateMovieRes) String() string { return proto.CompactTextString(m) }
func (*UpdateMovieRes) ProtoMessage()    {}
func (*UpdateMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{6}
}

func (m *UpdateMovieRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMovieRes.Unmarshal(m, b)
}
func (m *UpdateMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMovieRes.Marshal(b, m, deterministic)
}
func (m *UpdateMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMovieRes.Merge(m, src)
}
func (m *UpdateMovieRes) XXX_Size() int {
	return xxx_messageInfo_UpdateMovieRes.Size(m)
}
func (m *UpdateMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMovieRes proto.InternalMessageInfo

type DeleteMovieReq struct {
	Id                   []int32  `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMovieReq) Reset()         { *m = DeleteMovieReq{} }
func (m *DeleteMovieReq) String() string { return proto.CompactTextString(m) }
func (*DeleteMovieReq) ProtoMessage()    {}
func (*DeleteMovieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{7}
}

func (m *DeleteMovieReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMovieReq.Unmarshal(m, b)
}
func (m *DeleteMovieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMovieReq.Marshal(b, m, deterministic)
}
func (m *DeleteMovieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieReq.Merge(m, src)
}
func (m *DeleteMovieReq) XXX_Size() int {
	return xxx_messageInfo_DeleteMovieReq.Size(m)
}
func (m *DeleteMovieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieReq proto.InternalMessageInfo

func (m *DeleteMovieReq) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteMovieRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMovieRes) Reset()         { *m = DeleteMovieRes{} }
func (m *DeleteMovieRes) String() string { return proto.CompactTextString(m) }
func (*DeleteMovieRes) ProtoMessage()    {}
func (*DeleteMovieRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{8}
}

func (m *DeleteMovieRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMovieRes.Unmarshal(m, b)
}
func (m *DeleteMovieRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMovieRes.Marshal(b, m, deterministic)
}
func (m *DeleteMovieRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMovieRes.Merge(m, src)
}
func (m *DeleteMovieRes) XXX_Size() int {
	return xxx_messageInfo_DeleteMovieRes.Size(m)
}
func (m *DeleteMovieRes) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMovieRes.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMovieRes proto.InternalMessageInfo

type GetAllMoviesReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllMoviesReq) Reset()         { *m = GetAllMoviesReq{} }
func (m *GetAllMoviesReq) String() string { return proto.CompactTextString(m) }
func (*GetAllMoviesReq) ProtoMessage()    {}
func (*GetAllMoviesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{9}
}

func (m *GetAllMoviesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllMoviesReq.Unmarshal(m, b)
}
func (m *GetAllMoviesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllMoviesReq.Marshal(b, m, deterministic)
}
func (m *GetAllMoviesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMoviesReq.Merge(m, src)
}
func (m *GetAllMoviesReq) XXX_Size() int {
	return xxx_messageInfo_GetAllMoviesReq.Size(m)
}
func (m *GetAllMoviesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMoviesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMoviesReq proto.InternalMessageInfo

type GetAllMoviesRes struct {
	Res                  []*MovieRes `protobuf:"bytes,1,rep,name=res,proto3" json:"res,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetAllMoviesRes) Reset()         { *m = GetAllMoviesRes{} }
func (m *GetAllMoviesRes) String() string { return proto.CompactTextString(m) }
func (*GetAllMoviesRes) ProtoMessage()    {}
func (*GetAllMoviesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{10}
}

func (m *GetAllMoviesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllMoviesRes.Unmarshal(m, b)
}
func (m *GetAllMoviesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllMoviesRes.Marshal(b, m, deterministic)
}
func (m *GetAllMoviesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllMoviesRes.Merge(m, src)
}
func (m *GetAllMoviesRes) XXX_Size() int {
	return xxx_messageInfo_GetAllMoviesRes.Size(m)
}
func (m *GetAllMoviesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllMoviesRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllMoviesRes proto.InternalMessageInfo

func (m *GetAllMoviesRes) GetRes() []*MovieRes {
	if m != nil {
		return m.Res
	}
	return nil
}

func init() {
	proto.RegisterType((*MovieRes)(nil), "movie.MovieRes")
	proto.RegisterType((*SearchMovieReq)(nil), "movie.SearchMovieReq")
	proto.RegisterType((*SearchMovieRes)(nil), "movie.SearchMovieRes")
	proto.RegisterType((*AddMovieReq)(nil), "movie.AddMovieReq")
	proto.RegisterType((*AddMovieRes)(nil), "movie.AddMovieRes")
	proto.RegisterType((*UpdateMovieReq)(nil), "movie.UpdateMovieReq")
	proto.RegisterType((*UpdateMovieRes)(nil), "movie.UpdateMovieRes")
	proto.RegisterType((*DeleteMovieReq)(nil), "movie.DeleteMovieReq")
	proto.RegisterType((*DeleteMovieRes)(nil), "movie.DeleteMovieRes")
	proto.RegisterType((*GetAllMoviesReq)(nil), "movie.GetAllMoviesReq")
	proto.RegisterType((*GetAllMoviesRes)(nil), "movie.GetAllMoviesRes")
}

func init() { proto.RegisterFile("movie.proto", fileDescriptor_fde087a4194eda75) }

var fileDescriptor_fde087a4194eda75 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x6a, 0xab, 0x40,
	0x14, 0x86, 0xa3, 0x5e, 0x4d, 0x72, 0xcc, 0x35, 0xf7, 0x0e, 0x6d, 0x18, 0xa4, 0x0b, 0x3b, 0x50,
	0xc8, 0x2a, 0x8b, 0x24, 0xd0, 0x55, 0xa1, 0x81, 0x42, 0x57, 0xdd, 0x18, 0xfa, 0x00, 0x46, 0x07,
	0x22, 0x98, 0x98, 0x38, 0x93, 0x40, 0xf7, 0x7d, 0x8c, 0xbe, 0x4d, 0x5f, 0xac, 0x38, 0x8e, 0x76,
	0xc6, 0xba, 0x48, 0x77, 0x9e, 0xff, 0xcc, 0x7f, 0xfc, 0xcf, 0x37, 0x0a, 0xee, 0x2e, 0x3f, 0xa7,
	0x74, 0x76, 0x28, 0x72, 0x9e, 0x23, 0x5b, 0x14, 0xe4, 0xc3, 0x80, 0xc1, 0x4b, 0xf9, 0x14, 0x52,
	0x86, 0x3c, 0x30, 0xd3, 0x04, 0x1b, 0x81, 0x31, 0xb5, 0x43, 0x33, 0x4d, 0xd0, 0x15, 0xd8, 0x3c,
	0xe5, 0x19, 0xc5, 0x66, 0x60, 0x4c, 0x87, 0x61, 0x55, 0x20, 0x1f, 0x06, 0x49, 0x5a, 0xd0, 0x98,
	0xe7, 0x05, 0xb6, 0x44, 0xa3, 0xa9, 0xd1, 0x0d, 0x0c, 0xf9, 0xf6, 0xb4, 0xdb, 0xec, 0xa3, 0x34,
	0xc3, 0xb6, 0x68, 0x7e, 0x0b, 0x68, 0x02, 0x0e, 0xe3, 0x11, 0x3f, 0x31, 0xec, 0x88, 0x77, 0xc8,
	0x0a, 0x61, 0xe8, 0xc7, 0xf9, 0x69, 0xcf, 0x8b, 0x37, 0xdc, 0x17, 0x9e, 0xba, 0x24, 0xef, 0x06,
	0x78, 0x6b, 0x1a, 0x15, 0xf1, 0x56, 0x86, 0x3c, 0x5e, 0x18, 0x52, 0x19, 0xf9, 0x47, 0x1b, 0xa9,
	0x84, 0xb0, 0xb5, 0x10, 0xea, 0x5a, 0x8e, 0xbe, 0x16, 0x59, 0xb4, 0x52, 0x30, 0x74, 0x0b, 0x56,
	0x41, 0x19, 0x36, 0x02, 0x6b, 0xea, 0xce, 0xc7, 0xb3, 0x8a, 0x6c, 0xdd, 0x0d, 0xcb, 0x1e, 0x59,
	0x82, 0xbb, 0x4a, 0x92, 0x26, 0xf7, 0x1d, 0x54, 0xc8, 0x45, 0xf4, 0x0e, 0x8f, 0xbc, 0x90, 0xbf,
	0xaa, 0x8b, 0x91, 0x7b, 0xf0, 0x5e, 0x0f, 0x49, 0xc4, 0xe9, 0x6f, 0xe7, 0xfc, 0x6b, 0x19, 0x19,
	0x09, 0xc0, 0x7b, 0xa2, 0x19, 0x55, 0x46, 0xd5, 0x28, 0xad, 0x0a, 0x65, 0xe9, 0xd1, 0x4e, 0x30,
	0xf2, 0x1f, 0xc6, 0xcf, 0x94, 0xaf, 0xb2, 0x4c, 0x28, 0x2c, 0xa4, 0x47, 0xb2, 0x6c, 0x4b, 0x97,
	0xc0, 0x98, 0x7f, 0x9a, 0x30, 0x12, 0xca, 0x9a, 0x16, 0xe7, 0x34, 0xa6, 0x68, 0x09, 0x83, 0x7a,
	0x4f, 0x84, 0xa4, 0x45, 0xc1, 0xe5, 0xff, 0xd4, 0x18, 0xe9, 0xa1, 0x07, 0x70, 0x95, 0x8b, 0x40,
	0xd7, 0xf2, 0x90, 0xfe, 0x89, 0xf8, 0x9d, 0xb2, 0xb4, 0x2b, 0x50, 0x1a, 0xbb, 0x4e, 0xd8, 0xef,
	0x94, 0xa5, 0x5d, 0xe1, 0xd3, 0xd8, 0x75, 0xaa, 0x7e, 0xa7, 0x5c, 0xda, 0x1f, 0x61, 0xa4, 0x92,
	0x43, 0x13, 0x79, 0xb0, 0x45, 0xd8, 0xef, 0xd6, 0x19, 0xe9, 0x6d, 0x1c, 0xf1, 0xef, 0x2e, 0xbe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x88, 0xc8, 0x2f, 0xfc, 0xca, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MovieServiceClient interface {
	AddMovie(ctx context.Context, in *AddMovieReq, opts ...grpc.CallOption) (*AddMovieRes, error)
	SearchMovie(ctx context.Context, in *SearchMovieReq, opts ...grpc.CallOption) (*SearchMovieRes, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieReq, opts ...grpc.CallOption) (*UpdateMovieRes, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieReq, opts ...grpc.CallOption) (*DeleteMovieRes, error)
	GetAllMovies(ctx context.Context, in *GetAllMoviesReq, opts ...grpc.CallOption) (*GetAllMoviesRes, error)
}

type movieServiceClient struct {
	cc *grpc.ClientConn
}

func NewMovieServiceClient(cc *grpc.ClientConn) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) AddMovie(ctx context.Context, in *AddMovieReq, opts ...grpc.CallOption) (*AddMovieRes, error) {
	out := new(AddMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/AddMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) SearchMovie(ctx context.Context, in *SearchMovieReq, opts ...grpc.CallOption) (*SearchMovieRes, error) {
	out := new(SearchMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/SearchMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieReq, opts ...grpc.CallOption) (*UpdateMovieRes, error) {
	out := new(UpdateMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieReq, opts ...grpc.CallOption) (*DeleteMovieRes, error) {
	out := new(DeleteMovieRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetAllMovies(ctx context.Context, in *GetAllMoviesReq, opts ...grpc.CallOption) (*GetAllMoviesRes, error) {
	out := new(GetAllMoviesRes)
	err := c.cc.Invoke(ctx, "/movie.MovieService/GetAllMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
type MovieServiceServer interface {
	AddMovie(context.Context, *AddMovieReq) (*AddMovieRes, error)
	SearchMovie(context.Context, *SearchMovieReq) (*SearchMovieRes, error)
	UpdateMovie(context.Context, *UpdateMovieReq) (*UpdateMovieRes, error)
	DeleteMovie(context.Context, *DeleteMovieReq) (*DeleteMovieRes, error)
	GetAllMovies(context.Context, *GetAllMoviesReq) (*GetAllMoviesRes, error)
}

// UnimplementedMovieServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (*UnimplementedMovieServiceServer) AddMovie(ctx context.Context, req *AddMovieReq) (*AddMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (*UnimplementedMovieServiceServer) SearchMovie(ctx context.Context, req *SearchMovieReq) (*SearchMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMovie not implemented")
}
func (*UnimplementedMovieServiceServer) UpdateMovie(ctx context.Context, req *UpdateMovieReq) (*UpdateMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (*UnimplementedMovieServiceServer) DeleteMovie(ctx context.Context, req *DeleteMovieReq) (*DeleteMovieRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (*UnimplementedMovieServiceServer) GetAllMovies(ctx context.Context, req *GetAllMoviesReq) (*GetAllMoviesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMovies not implemented")
}

func RegisterMovieServiceServer(s *grpc.Server, srv MovieServiceServer) {
	s.RegisterService(&_MovieService_serviceDesc, srv)
}

func _MovieService_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/AddMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).AddMovie(ctx, req.(*AddMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_SearchMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).SearchMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/SearchMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).SearchMovie(ctx, req.(*SearchMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetAllMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMoviesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetAllMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/GetAllMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetAllMovies(ctx, req.(*GetAllMoviesReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MovieService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMovie",
			Handler:    _MovieService_AddMovie_Handler,
		},
		{
			MethodName: "SearchMovie",
			Handler:    _MovieService_SearchMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
		{
			MethodName: "GetAllMovies",
			Handler:    _MovieService_GetAllMovies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
